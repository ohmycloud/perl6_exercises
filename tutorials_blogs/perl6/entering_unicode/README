
Generally, I just use Vim's standard digraph feature for entering accented 
characters, but there are some Unicode characters that are specifically useful 
with p6.


"Texas" variants {#{{{

    p6 docu keeps referring to ASCII characters as "Texas".  Not that it's 
    wrong, but I've never ever once heard 'Texas' used this way before, ever, 
    anywhere, and it's splattered all over the p6 docs.
        
        Googling for "ascii texas" returns a whole bunch of ascii-art texas 
        state maps.  I think that using "texas" this way may well be 
        specifically a p6 thing. 

        As far as I can tell, "Texas" in this context doesn't just mean ASCII, 
        it means the ASCII equivalent to a Unicode glyph in code.

        Great.  More tribal jargon that nobody else is going to understand.


    Anyway, most of the fucked up, hard-to-enter unicode operators and such 
    have Texas equivalents, to help save your sanity.

    eg these two lines are identical:
            my $var = <1 2 3> «+» <4 5 6>;
            my $var = <1 2 3> <<+>> <4 5 6>;


    This page contains a table of Unicode and Texas equivalents:
        http://docs.perl6.org/language/unicode_texas
    
}#}}}

Unicode as variable names {#{{{
    This works just fine:
        my $é = "foobar";
        say $é;
}#}}}
Guillemets «  » {#{{{
   
    «    dec 171, oct 253, hex ab
    »    dec 187, oct 273, hex bb

    Both of these can be entered with the obvious digraphs.
   

    They can be used as replacements for double-quotes:
        my $a = «foobar»;
        say $a;

    Or as replacements for regular angle-brackets in POD:
        C« This shows up as fixed-width.  »

    However, the regular double-quote and angle-bracket characters still work 
    just fine for these tasks, so I don't know why you'd bother.



    But you can also use these characters to indicate a "hyperoperator".

    This in no way does what you want it to do.
        my @a = <1 2 3>;
        @a += 4;
        say @a;             # [7]
    Looks like the addition evaluates the array the way p5 would.  The 
    addition is scalar, so we work through the array as a list and end up with 
    the last value, the 3, and add our 4 to that, ending up with the 7.

    So if we wanted to add 4 to each element in the array, we'd use a 
    hyperoperator:
        my @a = <1 2 3>;
        @a «+=» 4;
        say @a;             # [5 6 7]

    Those Guillemets force the += to become a hyperoperator and add the 4 to 
    each element in the array.

    OK, I guess, but if I ever wanted to do this, I'd likely just use map.

}#}}}
Set/Bag operators {#{{{

    There are a whole bunch of these "set/bag operators", which perform 
    various set operations (is X a subset of Y, or is X contained in Y, or is 
    X a union of Y, etc)

    
    List of the characters and their unicode points:
        http://doc.perl6.org/language/unicode_entry#Set%2Fbag_operators

    Actual documentation on what these characters do:
        http://doc.perl6.org/language/setbagmix#Set%2FBag_Operators


    (elem), ∈
        (elem) and ∈ are synonyms.  "If $var is an element of this set..."

        ^Qu2208 produces ∈

        :digraph tells me that the combo "( <bs> -" should also produce that 
        character, but it's not working at all, so just use the ^Q sequence if 
        you need it.

        

        A "set" is a p6 type, but in this case, your "set" can be an array or 
        a list etc.

            my @arr = <foo bar baz>;
            my $str = "bar";
    
        So both of these conditionals are equivalent:
            if $str (elem) @arr {   say "this hits" }
            if $str ∈ @arr {        say "so does this }



    As with the Guillemets, the unicode character is neato-looking, but 
    unnecessary in every case.  If I can type "(elem)" instead of having to 
    remember how to type "∈", I'm going to type "(elem)" every time.  

    If I need to use any of these characters a lot, I suppose I could set up 
    vim abbreviations for them.

}#}}}
Superscripts, Subscripts, Math Symbols {#{{{

    Surprisingly, these work:
        my $sixteen = 4²;       # 178,  0xb2
        say $sixteen;           # 16

        my $sixtyfour = 4³;     # 179, 0xb3
        say $sixtyfour;         # 64

    The 2 and 3 superscripts are defined in the latin supplemental unicode 
    block, so those are the chars you need to use if you do this.

    You can also generate those superscripts as digraphs with
        2 <bs> 2
        3 <bs> 3


    This, also surprisingly, also works:
                say π;          # 3.14159....
                say ½;          # 0.5
                say ½ + ½;      # 1

        The pi character can be created as a digraph with
                p <bs> *        lowercase pi (as above)
                P <bs> *        uppercase pi

        I also set up iabbrs in vi for pi, so you can just type "pi" or "PI" 
        to get the unicode character:
                iabbr pi π
                iabbr PI Π

        I did get this to work once (the lowercase pi above was created this 
        way), but 9 times out of 10 the digraph just fails to work.



    The tut links out to this wikipedia page with a bunch of math symbols:
        https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode#Mathematical_Operators_block

    Presumably, those should all work too.

}#}}}


Creating Unicode Characters in Vim {#{{{


    Digraphs

        First of all, fuck using 
            e <bs> '
        to try to create the é character.  

        I don't know what's going on with my Vim; I expect the problem is an 
        addon.  But sometimes that sort of Backspace digraph creation works, 
        but most of the time it does not.  I can not find any pattern at all 
        as to when it works and when it doesn't.

        And making it work always requires turning off AutoClose, which is 
        what doubles up my braces and parens for me, and I always forget it's 
        off and end up typing lots of {{ characters before I remember to turn 
        it back on again.


        So, to make a regular digraph in vim, just use Ctrl-K every time:
                type type type Ctrl-K e' type type type
            produces:
                type type type é type type type





There's another method of entering unicode chars in vim where you type the 
unicode hex value.

Most docs say you have to start this with Ctrl-V, but I have that mapped to 
Paste, so I'd use Ctrl-Q instead.

So, to put in a Yen symbol (Decimal 165, Hex a5, Oct 245)
    - Start in Insert mode, then do any of the following:
        - ^Q165             Dec
        - ^Qo245            Oct
        - ^Qxa5             Hex

    The "o" (that's an oh, not a zero) for octal and the "x" for hex can be 
    upper or lower case.  The a-f hex digits can also be in either case.





You can also enter BMP Unicode codepoints using its hex value NNNN with:
    - ^QuNNNN           where 0000 <= NNNN <= FFFF

or you can use any Unicode codepoint using its hex value NNNNNNNN with:
    - ^QUNNNNNNNN       where 00000000 <= NNNNNNNN <= 7FFFFFFF

    That's eight Ns.


    No, I don't know what "BMP Unicode codepoints" are, or how they differ 
    from "any Unicode codepoint".

    I'm also unclear if the "u" has to be lowercase for the BMP and uppercase 
    For the "any Unicode codepoint", but I suspect that they do have to use 
    the cases as listed above, since that's what the docs indicates.


    

Vim also allows using combining characters (instead of the self-contained 
characters I've been talking about so far).

So, to enter é, you'd enter an "e" and then the combining aigu character.

If you really want to do this, see the "maxcombine" option:
    http://vimdoc.sourceforge.net/htmldoc/options.html#%27maxcombine%27

...and the "mbyte-combining option:
    http://vimdoc.sourceforge.net/htmldoc/mbyte.html#mbyte-combining

I really don't understand what the vim docs are telling me about this, and 
I've never needed it, so go learn it if you need it.


} #}}}
Handy Vim Digraphs {#{{{

    Some of these unicode chars do not display properly in Gvim.  ⅘  4/5) is a 
    particularly good example of that.

    If you go into command mode and pass your cursor right-to-left over that 
    character, the 5 denominator shows up.  If you pass your cursor 
    left-to-right over the character, the 5 denominator disappears.

    It (the 5 denominator) is there in either case, and the character works in 
    either case, this is just a display issue.



        Unicode Char    Ctrl-K followed by these two chars
        π               p*
        Π               P*
        «               <<
        »               >>
        ½               12
        ⅓               13
        ⅘               45 (etc)



    I have not figured out how to make these with digraphs yet, so here's the 
    Unicode key sequences:

        Unicode Char    Ctrl-Q u followed by:
        ｢               ff62
        ｣               ff63
        ∈               2208
        ∪               222a


    
}#}}}


