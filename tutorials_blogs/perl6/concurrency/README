
http://doc.perl6.org/language/concurrency


CHECK
I definitely need to spend some more time in here playing with this stuff 
until it penetrates.

Definitely look for CH.ECK marks in ./, as well as NY.I marks.


Avoid Thread and Scheduler {#{{{
    p6 has high-level APIs (which will be covered below).  The Thread and 
    Scheduler APIs are lower-level.

    Some p6 features may implicitly operate asynchronously.  So you're 
    encouraged to avoid those low-level APIs to keep from getting in the way 
    of these implicitly asynchronous features.

    http://doc.perl6.org/type/Thread
    http://doc.perl6.org/type/Scheduler
}#}}}
Promise {#{{{
    Sometimes called a "future" in other languages.

    See ./promise.p6
}#}}}
Supplies {#{{{
    https://i.ytimg.com/vi/5AplRigbvtI/hqdefault.jpg

    A Supply is an "asynchronous data streaming mechanism".
    A multi-consumer message stream.

    
    The difference between a Supply and a Channel
        A Supply is a data stream with multiple subscribers, all of whom will 
        get the same message.  Think of it as an RSS feed.  All subscribers to 
        that feed get the same data.

        A Channel is a thread-safe queue for sending values to consumers.  
        Think of this as a file processor.  Your producer can read records 
        from an input file, then write them to a Channel to be processed.  Any 
        number of consumers can then read from the channel to process those 
        records.  Each consumer will get a DIFFERENT record from the queue.
            See ROOT/projects/process_file_in_chunks/channel_process.p6


    See also the Supplies section from JW's video, notes are below.

    ./supplies.p6

}#}}}
Channels {#{{{

    A thread-safe queue that can have multiple readers and writers.

    The difference between a Supply and a Channel
        A Supply is a data stream with multiple subscribers, all of whom will 
        get the same message.  Think of it as an RSS feed.  All subscribers to 
        that feed get the same data.

        A Channel is a thread-safe queue for sending values to consumers.  
        Think of this as a file processor.  Your producer can read records 
        from an input file, then write them to a Channel to be processed.  Any 
        number of consumers can then read from the channel to process those 
        records.  Each consumer will get a DIFFERENT record from the queue.
            See ROOT/projects/process_file_in_chunks/channel_process.p6

    A channel is a fifo.  After a message has been read once, it's gone.  To 
    allow multiple readers to read a single message, use a Supply instead.

    ./channels.p6
    
}#}}}
Proc::Async {#{{{

    I thought this sounded like a replacement for fork, but no.

    I'm not getting enough info from the tut, but see notes on asynchrony in 
    Jonathan Worthington's video, below.

}#}}}
Low-level APIs {#{{{
    The start of the Concurrency section warned me against using these.  So I 
    probably won't bother making a test script, but do want to at least read 
    the section once so it's been pasteurized.
}#}}}
Hyper Sequences (Thread a regular loop) {#{{{

    This was tacken from Zoffix's blog
        http://blogs.perl.org/users/zoffix_znet/2016/04/perl-6-is-slower-than-my-fat-momma.html

    Docs on .race
        http://docs.perl6.org/routine/race

    These are very easy to implement. They take a regular loop and thread the 
    thing.  See ./hyper_sequence.p6

    .race() used in that code is an Iterable method.  It does not 
    (necessarily) preserve order.  The simple example in ./hyper_sequence.p6 
    implies that it does, but if you increase the number of things you're 
    iterating over and increase the batch size, you'll get output out of 
    order.

    The .race docs indicate that .hyper (http://docs.perl6.org/routine/hyper) 
    does preserve order.  Use whichever makes sense.

}#}}}


### Info from places other than the tut

    Jonathan Worthington vid:
        "Parallelism, Concurrency, and Asynchrony in Perl 6"
        https://www.youtube.com/watch?v=JpqnNCx7wVY

        "With parallelism, you _choose_ do to things in parallel.  Concurrency 
        choose you".  The example he gives on concurrency is two passengers 
        attempting to book a plane ticket concurrently.  We must make sure we 
        don't sell both of them the same seat.

        "Concurrency is a property of a problem."  He doesn't say this, but 
        the implication is that "parallelism is a property of a solution".

        race (batch processing data using threads) {#{{{
            starts around 16:40.

            He's reading weather station data from a bunch of files.  Filtering it to 
            only stations in Europe.  Then trying to find the hottest place in Europe.

            By 16:40 he's already discussed the sequential solution, and also talked 
            about splitting up the input files and passing them separately through 
            read, filter, find-hottest routines using promises.

            But at 16:40 he shows how to use race() to turn on parallel computing for 
            the whole mess.  Looks nice.
        }#}}}
        Proc::Async (asynchrony)  {#{{{
            18:25

            
            Even though JW's examples are good and helpful, they're still just 
            about synchronous shell commands, which is the same problem I had 
            with the tutorial.  He talks about GUI events being an example of 
            asynchrony, but he doesn't give any example of how to handle that 
            kind of stuff using Proc::Async.


            As I go through the video more, I think that Proc::Async is 
            specifically meant for asynchronously running system calls.  
            "Asynchrony" in p6 is not limited to Proc::Async.



            This is about things that will happen in the future, but exactly 
            when they'll happen is not under our control.
                Responses to web requests coming back
                User interaction with a GUI
                Signals
                etc

            The first example he gives is shown in ./proc_async.p6.

            ***
            At about 22:00 he talks about how to throttle that example so it 
            doesn't overwhelm the network.  Not going to bother copying, but 
            it's idiomatic, so see the video.

        }#}}}
        Promise (Perl 6's "asynchronous scalar") {#{{{
        }#}}}
        Supplies (Perl 6's "asynchronous array or sequence") {#{{{

            JW notes 3 types of supplies:
                    Infinite:
                        <---Emit--Emit------Emit----Emit----->

                    Finite (success):
                        --Emit---Emit-----Emit--Emit---DONE

                    Finite (error):
                        --Emit---Emit-----ERROR(Quit)


            He gives an example of watching a file for changes.  See 
            ./file_watch_supply.p6.  Tapping a supply like this is like 
            setting up an event.

            "A supply is sort of like a pipeline ... but values are pushed 
            through it" - JW


        }#}}}
whenever (asynchronous for loop) {{{{

    See file_watch_supply.p6.


    whenever is essentially an asynchronous for loop.  It must be used in 
    either a supply block or a react block.

    The supply block returns a supply you can tap, as we've seen before.
    See file_watch_supply.p6.


    The react block is like an event loop.  There's an example sub in 
    file_watch_supply.p6, but there's a whole script that's probably a better 
    example in dir_checker.p6.

    
}}}}


