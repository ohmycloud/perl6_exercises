
http://doc.perl6.org/language/regexes



Lexical Conventions {#{{{

    Create a regex object with either of:
            rx/abc/;
            /abc/;

    You can also use this, but it immediately matches $_:
            m/abc/;

    So, all of these conditionals work:
            if 'properly' ~~ /perl/ {
            if 'properly' ~~ m/perl/ {
            if 'properly' ~~ rx/perl/ {
                say "match";
            }

    To use that "match $_" version:
            my @arr = <abc def ghi>;
            for @arr {
                if m/d/ { .say }        # def
            }

    The rx// and m// versions can use any grouping characters EXCEPT colons 
    and regular parenthesis.  The // version with no prefix must use slashes.  
    Very p5-y.

    The section on substitution also warns against using "balancing delimiters 
    such as {}".  So I'd stay away from those and square brackets while you're 
    at it.

    Just use slashes fer Paul's sake.

}#}}}
Regex Objects {# {{{
    
    This is partially covered elsewhere, I just wanted to have a topic to 
    easily find later.

            my $re = /bar/;     # NOTE this cannot start with m// -- just slashes.
            my $re = m/bar/;    # GONNNNG!  The .match() method below won't be found.
            
            if 'foobarbaz'.match($re) {
                say "Match!";
            }


    If you want to include adverbs in your regex, nothing changes:
            my $re = / i: bar /;
}# }}}
Whitespace {#{{{

    Whitespace in regexen is generally ignored, like a p5 regex with the //x 
    flag set.

    So instead of turning on "ignore whitespace", in p6 you have to turn it 
    off (if you want it off), using the :s (:sigspace) adverb.

    WILL NOT HIT!
            my $str = "foo bar";
            if $str ~~ /foo bar/ {
                say "match";
            }


    HERE YA GO:
            my $str = "foo bar";
            if $str ~~ /foo \s bar/ {       # Specify the whitespace with \s
                say "match";
            }


    WHITESPACE SPECIFIERS
        \s          Any whitespace
        ' '         Specifically a single space
        \t, \n      Tab, newline
        \h          Any horizontal whitespace (space, tab)
        \v          Any vertical whitespace (newline, form feed)
        .ws         A built-in rule for whitespace "that oftentimes does what you
                    actually want"


    That last one looks probably handy, but scary.  The text in quotes is what 
    the tut says, and it's all the tut says.  

    "Look, this is nifty magic!" translates in my head to "Here be dragons."  
    .ws looks like nifty magic.

    CHECK
    I don't mean to completely avoid .ws -- it might end up being A Good 
    Thing.  I just don't understand it, and the tut refuses to explain it.  I 
    want to know what it is before I go slapping it into code.


}#}}}
Literals (quoting and escaping) {#{{{

    The rules for this are different from p5.

    
    Alphanumerics and _ are literals.  ANY other character has to be escaped.
            if m/foobar/ { }
            if m/ foo\ bar/ {}
            if m/ foo\:bar/ {}

    That's going to lead to a lot of escaping.  To avoid leaning-toothpick 
    syndrome, you can quote the string inside the pattern:
            if m/ "foo bar"/ {}
            if m/ "foo:bar"/ {}

}#}}}
The Match class {#{{{

    http://doc.perl6.org/type/Match

    After a successful match has been made, $/ contains that match class 
    (think of it as $_ for regexen).

    So we get this, which is nice:
            if 'abcdefg' ~~ / de / {
                say $/;                 # ｢de｣
                say ~$/;                # de
                say $/.prematch;        # abc
                say $/.postmatch;       # fg
                say $/.from;            # 3
                say $/.to;              # 5
            }


    The match attempt returns either a Match object on success, or a Nil 
    object on failure.
        Success:
            my $thingy = 'abcdefg' ~~ / de /;
            say $thingy;                # ｢de｣
            say $thingy.WHAT;           # (Match)
            say $thingy.prematch        # abc
            ### etc as above

        Failure:
            my $thingy = 'abcdefg' ~~ / flurble /;
            say $thingy;                # (Any)
            say $thingy.WHAT;           # (Any)

            say $thingy.prematch
            # GONNNG!  Method 'prematch' not found for invocant of class 'Any'

}#}}}
Wildcards and character classes (including predefined classes like \d and \w) {#{{{

    A dot matches any character.  Yes, ANY character:
            my $str = "foo\nbar";
            if $str ~~ /foo.bar/ { say "match"; }       # hits!

        A DOT NOW MATCHES ANY CHARACTER INCLUDING NEWLINE.


    Also, remember that whitespace gets ignored:
            'perl' ~~ / pe . l /;                       # True


    Pre-defined character classes
        These look similar to p5 but there's some new stuff.

        \d and \D {#{{{
            match digits and non-digits

            Unicode Roman numerals (Ⅴ, Ⅶ, Ⅸ, etc) do not match here.

        }#}}}
        \h and \H {#{{{
            Horizontal whitespace.
            So space, nbsp, tab.

            Not a newline.
        }#}}}
        \n and \N {#{{{
            Logical newline.

            \n is "supposed to also match a windows crlf codepoint pair".  The 
            tut waffles on this a little.
        }#}}}
        \s and \S {#{{{
            Single whitespace character, not necessarily only horizontal (so 
            newline does match, along with space and tab etc).
        }#}}}
        \t and \T {#{{{
            A tab.  Just the tab character.  "Exotic" higher unicode tabs 
            don't match.
        }#}}}
        \v and \V {#{{{
            Vertical whitespace.  Newline, linefeed, vertical tab, carriage 
            return, etc all match.

            Horizontal-only whitespace (space, tab, etc) do NOT match.

            Yes, the bare carriage return is included here (tested).
        }#}}}
        \w and \W {#{{{
            Digit, underscore, or letter.
            
            "Letter" is defined as anything in unicode category "L".  Here's a 
            list of unicode categories:
                http://www.fileformat.info/info/unicode/category/index.htm

            Unicode Roman numerals (Ⅴ, Ⅶ, Ⅸ, etc) are listed in the Unicode 
            category "[Nl]", or "Number, Letter".  They do not match here.  
            Note that the examples in parens above are not regular letters; 
            particularly note that the Ⅴ is not a V.  Slide your cursor 
            right-to-left over those examples in command mode to see them 
            better.
        }#}}}

}#}}}
Unicode properties {#{{{

    There's a nice long list of unicode properties at
        http://doc.perl6.org/language/regexes#Unicode_properties

    But here are a few:
        <:N>        Number
        <:Nd>       Number, digit   (unclear how this differs from <:N>)
        <:Lu>       Letter, uppercase
        <:Ll>       Letter, lowercase
        <:P>        Punctuation
        <:Pd>       Punctuation, dash
        <:Ps>       Punctuation, open   ('s'tart)   (eg left paren, left brace, etc)
        <:Pe>       Punctuation, closed ('e'nd)     (eg right paren, right brace, etc)
        <:S>        Symbol
        <:Sc>       Symbol, currency ($, €, £)

    For eg, the unicode property "Lu" matches an uppercase letter, and would 
    be used like this:
            say "a" ~~ / <:Lu> /;       # Nil
            say "A" ~~ / <:Lu> /;       # ｢A｣


    Those properties can be negated with a preceding bang:
            say "a" ~~ / <!:Lu> /;      # ｢｣    (empty set, but match.)
            say "A" ~~ / <!:Lu> /;      # Nil


    Properties can be combined to create a character class, using +.  Here 
    we're trying to match either an uppercase letter or a digit:
            say "A" ~~ / <:Lu + :Nd> /;      # ｢A｣
            say "1" ~~ / <:Lu + :Nd> /;      # ｢1｣
            say "a" ~~ / <:Lu + :Nd> /;      # Nil
            
}#}}}
User-defined character classes and ranges {#{{{

    This looks very p5-y.

    Start a character class with <>.  We already showed this in the previous 
    section on Unicode properties, but that's what we were doing -- creating a 
    class:
            say 'ababcde1234' ~~ /<:Ll + :Nd>/;



    When we're not using unicode properties, we need to use [] to specify our 
    class "pieces".

    Combine multiple range definitions:
            say '1234567890'    ~~ /<[0..3] +[4..6] +[7..9]>/;
            say 'ababcde1234'   ~~ /<[a..d 1..4]>/;

        Allow a number from 1-3 or 6-9, but no other numbers:
            say '1'    ~~ /<[0..3] +[6..9]>/;       # ｢ 1 ｣
            say '4'    ~~ /<[0..3] +[6..9]>/;       # Nil
            say '8'    ~~ /<[0..3] +[6..9]>/;       # ｢ 8 ｣

    That first range, [0..3], does not have a sign in front of it.  The first 
    class mentioned doesn't need one; it defaults to '+'.  But that + is 
    there, inherently.  These three are the same as the above three:
            say '1'    ~~ /<+[0..3] +[6..9]>/;       # ｢ 1 ｣
            say '4'    ~~ /<+[0..3] +[6..9]>/;       # Nil
            say '8'    ~~ /<+[0..3] +[6..9]>/;       # ｢ 8 ｣



    Negating a character class is NOT p5-y; we're not using the carat at all.  
    Instead, we specify a minus sign instead of the plus signs used above.  
    Which, frankly, makes more sense than the carat.

        This example we already saw.  The first character, 'a', matches our 
        class:
            say 'ababcde1234' ~~ /<:Ll +:Nd>/;      # ｢a｣

        This one is new.  We're negating "Letter, lowercase", so the 'a' 
        doesn't match anymore.  But "Number, digit" is still true, so the '1' 
        matches:
            say 'ababcde1234' ~~ /<-:Ll +:Nd>/;     # ｢1｣

        Here, we're negating both Letter, lowercase AND Number, digit.  Since 
        our pattern doesn't contain any character that does not match either 
        of those, this match fails.
            say 'ababcde1234' ~~ /<-:Ll -:Nd>/;     # Nil

        Last, we'll add a capital Q in there.  That does match because it 
        doesn't fall into either of our negated categories:
            say 'ababcdQe1234' ~~ /<-:Ll -:Nd>/;     # ｢Q｣

    So if you're trying to match the contents of a quote-delimited string:
            my $str = 'He said "perl6 looks interesting" to me.';
            say $str ~~ / '"' <-["]> + '"' /;       # ｢ "perl6 looks interesting" ｣


}#}}}
Quantifiers {#{{{

    Again, whitespace is ignored, so unlike p5, you can have whitespace 
    between the atom and its quantifier.

    These all look p5-cromulent:
        One or more: +
            say 'aa' ~~ / \w + /;       # ｢ aa ｣

        zero or more: *
            say 'aa' ~~ / \w * /;       # ｢ aa ｣

        zero or one: ?
            say 'aa' ~~ / \w ? /;       # ｢ a ｣


    This is different; no more curly braces:
        min..max: **
            say 'abcdef' ~~ / \w ** 2..4 /;     # ｢ abcd ｣
            say 'abcdef' ~~ / \w ** 7..11 /;    # Nil

        An exact quantity match is similar; just provide a number instead of a 
        range:
            say 'abcdef' ~~ / \w ** 6 /;        # ｢ abcdef ｣

        You can specify a non-inclusive range (eg "a length of between, but 
        not including, 1 to 6 digits"):
                say '1'         ~~ /\d ** 1^..^6/;      # Nil
                say '12'        ~~ /\d ** 1^..^6/;      # ｢ 12 ｣
                say '123456'    ~~ /\d ** 1^..^6/;      # [12345]

        To specify that your password must have more than 6 characters, with 
        no upper limit, use the "Whatever" operator (*) for the upper:
                say 'qwerty'    ~~ / \w ** 6^..* /;     # Nil
                say 'longpass'  ~~ / \w ** 6^..* /;     # ｢ longpass ｣


    Here's some funk.  You can add a "quantifier modifier" in the form of a 
    percent followed by a sepchar, presumably to check if the CSV record 
    you're dealing with is in the correct format:
                say Bool('foo,bar' ~~ / \w+ % ',' /);   # True

    The tut specifically states that this will not match, because of the 
    trailing comma:
            say Bool('foo,bar,' ~~ / \w+ % ',' /);

        ...and for that, you should double up your percent chars:
            say Bool('foo,bar,' ~~ / \w+ %% ',' /);

        HOWEVER, both of those lines with the trailing comma, both with the 
        single and the double percents, return true.

    This whole thing strikes me as being a little bit too precious even if it 
    did work as documented, and probably won't ever get used outside of obfu 
    code.


}#}}}
Alternation {#{{{

    Specify alternatives with double pipes.  The first matching alternative 
    wins:
            say 'foobarbaz' ~~ / 'blarg' || 'foo' || 'bar' /;   # ｢ foo ｣



    Tut says that you can use a single pipe, but that will match the longest 
    alternative regardless of their specified order.

    It only offers this one example:
            say ('abc' ~~ / a | .b /).Str;
        The output of that is "ab".

    However, this code:
            my $str = 'foobarbazblargquux';
            say $str ~~ / 'foo' | 'blarg' /;
        returns "foo".

    We can get a longer string, but only if the RHS of our alternative is just 
    a longer version of the LHS:
            my $str = 'foobarbazblargquux';
            say $str ~~ / 'foo' | 'foobar' /;

    Which seems fairly fucking useless.  I guess I can imagine the need for 
    "get 'foobar' if it's there, but if it's not, and just 'foo' is there, get 
    that", but I can't see the that need for that popping up more than very 
    very rarely.

}#}}}
Anchors ( ^, ^^, $, $$ ) {#{{{

    Again, p5-y.

    String front anchor:
            say so 'perl'       ~~ / ^ perl /;      # True
            say so 'perly'      ~~ / ^ perl /;      # True
            say so 'properly'   ~~ / ^ perl /;      # False

    String rear anchor:
            say so 'perl'       ~~ / perl $ /;      # True
            say so 'perly'      ~~ / perl $ /;      # False
            say so 'pro-perl'   ~~ / perl $ /;      # True

    The rear anchor matches the end of the string, not the end of a line.
            my $str = "I like perl.
            It's goodly.";
            say so $str ~~ / perl $/;               # False



    Start and End of Line Anchors
        Instead of mucking with suffixes or flags, use ^^ and $$ to indicate 
        start and end of line versus the single-char versions, which are start 
        and end of string.

        Again, whitespace does not matter.

            my $str = q:to/END/;
            one is one
            two is two
            three is three
            END

            say so $str ~~ /^^ one .* one$$     /;      # True
            say so $str ~~ /^^ two .* two     $$/;      # True
            say so $str ~~ /^^ three .* three$$ /;      # True

}#}}}
Word Boundaries (<< and >>) {#{{{

    No more \b.  Now we can specify left- or right- word boundaries.
            my $str = "The quick brown fox";
            say so $str ~~ / << quic /;             # True
            say so $str ~~ / quic >> /;             # False

}#}}}
Grouping, Capturing {# {{{

    Output Note
        Below, I'm printing eg $0 and getting output wrapped in ｢｣ symbols.  
        The tut has been doing this:
            print ~$0;
            print ~$<mystr>;
        ...etc, and the output when you do that is NOT wrapped in ｢｣ symbols.  

        I don't recognize that leading tilde at this point so I haven't been 
        using it.



    Grouping works as expected:
            / a || b || c /         # matches 'a' or 'b' or 'c'
            / (a || b) || c /       # matches 'ac' or 'bc'

    Capturing works almost as expected, but capture variables start at $0 
    rather than $1 like p5:
            my $str = 'number 42';
            if $str ~~ /(number) \s (\d)+/ {
                say "The word is $0";
                say "The number is $1";
            }

    When capturing, $/ is a Match object that behaves somewhat like an array 
    in that it's subscriptable.  So the above could be written as:
            my $str = 'number 42';
            if $str ~~ /(number) \s (\d)+/ {
                say "The word is $/[0]";
                say "The number is $/[1]";
            }


    If you want to set up grouping like in the first example, but don't want 
    your groups to capture, use square braces instead of parens.

        Parens:
            my $str = 'ac';
            if $str ~~ / (a || b) || c / {
                say "Match";                    # Match
                say $0;                         # ｢ac｣ (the parens both group and capture)
            }

        Squares:
            my $str = 'ac';
            if $str ~~ / [a || b] || c / {
                say "Match";                    # Match
                say $0;                         # Nil (square braces only group)
            }


    Capture numbers normally start at $0 and go up as expected.  But 
    alternations reset the capture number count.  'bar' here _is_ in capture 
    number $0, not $1, since the || resets the number:
            my $str = 'bar';
            if $str ~~ / (foo) || (bar) / {
                say $0;                         # ｢bar｣
            }


    Named captures:
            my $str = 'bar';
            if $str ~~ / $<mystr> = (foo || bar) / {
                say $<mystr>;                   # ｢bar｣
            }


        Named captures don't always need the parens, if there's no grouping to 
        worry about:
            my $str = 'bar';
            if $str ~~ / $<mystr> = bar / {
                say $<mystr>;                   # ｢bar｣
            }

        I've never been a big fan of named captures in p5 -- the default 
        numbered captures have always been fine.

        But with p6's Grammars, I'm definitely going to want to get used to 
        using named captures.




}# }}}
Substitution {# {{{

    Basic:
            my $str = 'foobar';
            $str ~~ s/foo/BLARG/;
            $str.say;

        Or, the same code but using defaults:
            $_ = 'foobar';
            s/foo/BLARG/;
            .say;

    As with a normal matching regex, you can use other delimiters than slashes 
    (but stay away from parens, curly braces, and colons).

    
    Substitution follows the same rules specified elsewhere in this file, so I 
    won't bother restating.

}# }}}
Adverbs (flags) {# {{{

    Instead of jamming flags on at the end of the regex as in p5, in p6 they 
    get added on the front:
        p5:
            "fOoBaR" =~ s/foo/blarg/i;      # case-insensitive match on 'foo'
        p6:
            "fOoBaR" ~~ s:i/foo/blarg/;     # same thing - ci match on 'foo'


    ADVERB PLACEMENT

    There are two types of adverbs; Regex Adverbs and Matching Adverbs.

    Regex Adverbs can apply to only part of your regex, and can appear either 
    outside the regex as above, or inside it.  These two are identical:
            "fOoBaR" ~~ s:i/ foo /blarg/;
            "fOoBaR" ~~ s/:i foo /blarg/;

    The adverb only applies to parts of the pattern that occur lexically after 
    the adverb:
            say so "fooBARbaz" ~~ m/ 'foo' :i 'bar' 'baz' /;     # True
            say so "fooBARbaz" ~~ m/ 'foo' 'bar' :i 'baz' /;     # False

        That works without quoting the strings in the pattern, but omitting 
        those quotes produces a warning reminding you that space is not 
        significant, and quoting the strings removes that warning.

    You can also use grouping constructs to apply your adverb to only a 
    specific part of your pattern:
            say so "fooBARbaz" ~~ m/ 'foo' (:i 'bar' 'baz') /;     # True
            say so "FOObarbaz" ~~ m/ 'foo' (:i 'bar' 'baz') /;     # False


    Matching Adverbs can only appear on the outside of the regex.


    AVAILABLE ADVERBS
        
    :ratchet, :r -- Do not backtrack (Regex)
            say so 'abc' ~~ / \w+ . /;              # True
            say so 'abc' ~~ m:r/ \w+ . /;           # False

        In the first case, "w+" matches "abc", which means there's nothing 
        left to match the remaining ".".  That regex initially fails to match, 
        but then it backtracks, and the "w+" then matches just the "ab", 
        leaving the "c" available to match the ".".  So after backtracking, 
        the regex comes back true.

        In the second case, we get the same initial failed match.  But because 
        of :r, no backtracking occurs, and we just end up with a failure.

        Including :r will result in faster regex since backtracking is 
        expensive, but you obviously have to be careful about where you use 
        it.

        If you're using regex objects, a "token" is just a shortcut for a 
        ratcheting regex.  These two are identical:
                my token thing { ... }
                my regex thing { :r ... }

            It's additional cognitive load for not much of a shortcut, but 
            there ya go.

    :sigspace, :s - Make whitespace significant (Regex)
        Already partially covered in this file.  Whitespace in patterns in p6 
        is not significant by default unless it's quoted, like p5 with //x 
        turned on.

        Adding the :sigspace adverb makes whitespace significant, like p5's 
        default.


            True, but produces a warning reminding you that space is not 
            significant here:
                say so 'photoshop' ~~ m/photo shop/;        # True

            True, with no warning because of the quotes:
                say so 'photoshop' ~~ m/'photo' 'shop'/;    # True

            False, because whitespace is now significant:
                say so 'photoshop' ~~ m:s/photo shop/;      # False

            Same as above, but doesn't mess with Vim's syntax coloring:
                say so 'photoshop' ~~ m/s: photo shop/;      # False


        CHECK
        There a good bit of info at
            http://doc.perl6.org/language/regexes#Sigspace
        talking about <.ws> and how it relates to whitespace and how grammars 
        can change what <.ws> matches, but it looks like something I need to 
        come back to later.

    From here down, the rest are Matching Adverbs, so they cannot appear 
    inside the regex.

    :continue, :c -- Continue
        This takes an integer argument and specifies what offset of the string 
        to begin searching.

        This is a normal-looking match, looking for the 3 word characters 
        after finding 'foo'.  Perfectly cromulent:
            'foobarfoobaz' ~~ m/ foo (\w ** 3) /;
            say $0;                                 # bar

        Adding :c(3) means that we're going to start looking for 'foo' at 
        offset 3.  So we'll find the second instance of 'foo' and therefore 
        end up with 'baz' instead of 'bar':
            'foobarfoobaz' ~~ m:c(3)/ foo (\w ** 3) /;
            say $0;                                 # baz

        We could have started at any offset from 1 to 6 inclusive and ended up 
        with 'bar'.

    :exhaustive, :ex -- Exhaustive search.
        Find all possible matches, including overlapping ones.  See :global 
        for non-overlapping.
        
        Here's a normal match:
            '1234' ~~ m/(..)/;
            say ~$/;                # 12

        And here's the same match with :ex:
            '1234' ~~ m:ex/(..)/;
            say ~$/;                # 12 23 34

        Another ex example:
            '1234' ~~ m:ex/.*/;     # 1234 123 12 1  234 23 2  34 3  4

    :global, :g -- Global.
        You know what this does.  Similar to :ex, but :g does not return 
        overlapping matches.
            '1234' ~~ m:g/(..)/;
            say ~$/;                # 12 34
        
    :pos, :p -- Anchor the match at a specific point in the string
            '1234' ~~ m:pos(2)/(.)/;
            say ~$/;                # 3

    :overlap, :ov -- Include overlapping matches
        This differs from :ex in that it only returns the longest match each 
        time:
            '1234' ~~ m:ov/.*/;     # 1234 234 34 4

}# }}}
Lookaround Assertions (now easier to deal with) {# {{{
    
    Lookahead Assertions
        Find a pattern that appears before another pattern.
            'foobarFOObaz' ~~ m:i/ foo <?before baz> /;         # FOO

    Lookbehind Assertions
        Find a pattern that appears after another pattern.
            'foobarFOObaz' ~~ m:i/ <?after bar> foo /;          # FOO


    Those can both be negated by using a bang instead of a ?
            'foobarFOObaz' ~~ m:i/ foo <!before baz> /;         # foo
            'foobarFOObaz' ~~ m:i/ <!after bar> foo /;          # foo

}# }}}

Best Practices {# {{{


    The tut lists this section as "Best Practices and Gotchas", but doesn't 
    really list any Gotchas.


    As already mentioned, whitespace is not significant unless you turn on the 
    :sigspace adverb.

    That means that you can break up your regexen and include comments, just 
    like p5 //x:
            my regex float {
                <[+-]>?                 # sign is optional
                \d*                     # leading digits, optional
                '.'                     # decimal point.  Quoted, so not "any character"
                \d+                     # fractional digits, not optional

                [
                    'e' <[+-]>? \d+     # Optional exponent
                ]
            }


    Where possible, decompose your regexen into smaller atoms.  The above 
    'float' regex is more readable as:
            my token sign       { <[+-]> }
            my token decimal    { \d+ }
            my token exponent   { 'e' <sign>? <decimal> }

            my regex float {
                <sign>?
                <decimal>?
                '.'
                <decimal>
                <exponent>
            }

        That's quite nice.


    There are a couple other sections in the tut, but they're about stuff that 
    I already know about and Grammars, which I already know that I need to go 
    back and re-read.

}# }}}

