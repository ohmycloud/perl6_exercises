
The tutorial:
    http://doc.perl6.org/language/modules

The modules directory:
    https://modules.perl6.org/

.pm and .pl are acceptable extensions (and might be more common), but if you 
want to make the point that you're using p6, you can use ".pm6" and ".p6" 
extensions.

Terminology {#{{{
    
    A "module" is mostly what you think of as a module from p5.  But 
    "Technically a module is a set of /compunits/ which are usually files but 
    could come from anywhere as long as there is a /compunit repository..."

    The docs don't explain what a "compunit" is, but link out to S11, which 
    tells me that means "compilation unit".

    https://design.perl6.org/S11.html

    Think of it as a chunk of code and get on with your life.

}#}}}
Loading and Basic Importing {#{{{
    
    - need
        loads a compunit at compile time

    - use
        loads and imports a compunit at compile time.

        use is equivalent to:
            need MyModule;
            import MyModule

    - require
        loads a compunit at compile time and "imports definite symbols" at 
        runtime.

            sub do_stuff {
                require MyModule <&some_imported_func>;
                some_imported_func();
            }

            do_stuff();
            ### and now, some_imported_func is no longer defined.

}#}}}
Exporting, Conditional Importing {#{{{
    
    - is export
        Stuff can be exported by using the "is export" trait.

        "Stuff" is packages, subs, variables, constants, enums.
            
                unit module MyModule;
                our $var is export = 3;
                sub foo (Str $arg) is export { ...code... }
                constant $FOO is export = "foobar";
                enum FooBar is export <one two three>

                class MyClass is export { ...code... }

        However, if you're defining a subpackage (like a class) using the 
        namespace of the current package, the subpackage does not need to be 
        explicitly exported:
                class MyModule::MyClass { ...code... }


      Conditional exporting and importing behaves similarly to p5.

      In the module, the "is export" trait can accept a tag as an argument to 
      indicate what group the thingy belongs to.

      ALL, DEFAULT, and MANDATORY are predefined tags.

                # lib/JonTest.pm
                unit module JonTest;
                sub bag        is export             { ... }
                sub pants      is export(:MANDATORY) { ... }
                sub sunglasses is export(:day)       { ... }
                sub torch      is export(:night)     { ... }
                sub underpants is export(:ALL)       { ... }

                # main.pl
                use lib 'lib';
                use JonTest;                #bag, pants
                use JonTest :DEFAULT;       #the same
                use JonTest :day;           #pants, sunglasses
                use JonTest :night;         #pants, torch
                use JonTest :day, :night;   #pants, sunglasses, torch
                use JonTest :ALL;           #bag, pants, sunglasses, torch, underpants


}#}}}
Exporting Dynamically {#{{{

    http://doc.perl6.org/language/modules#UNIT%3A%3AEXPORT%3A%3A*
    
    I'm not going into detail on this here.  But the short version is that if 
    you wanted to do this...

            ### MyModule.pm6
            for <one two three four> -> $num {
                create_square_root_function( $num )
            }

            ### main.p6
            use MyModule;
            say square_root_one();
            say square_root_two();
            ...

        ...you can.


    Obviously the syntax I'm showing is bullshit.  See the link top this 
    section if you need to know how to actually do this.

}#}}}
EXPORT (explicit export) {#{{{

    You can export arbitrary stuff using an EXPORT sub in your module.

    Specifically note "ShortName" below.

            ### lib/Jontest.pm6
            class Jontest::Class {
                method do_stuff { say "this is do_stuff" }
            }
            sub EXPORT {
                {
                '$var'   => 'one',
                '@array' => <one two three>,
                '%hash'  => { one => 'two', three => 'four' },
                '&doit'   => sub { say "this is doit" },
                'ShortName' => Jontest::Class
                }
            }


            ### main.p6
            use lib 'lib';
            use JonTest;
            say $var;
            say @array;
            say %hash;
            doit();

            my $jt = ShortName.new;
            $jt.do_stuff;


    You cannot declare an EXPORT sub inside a package.  units and classes are 
    packages (I think), but I don't have an exhaustive list of what "packages" 
    are in p6.


    There's some more info about positional conditional exports, but it looks 
    somewhat nonsensical so I'm skipping it.
    
}#}}}
Modules Directory (CPAN-equivalent) {#{{{

    http://doc.perl6.org/language/modules#Distributing_Modules

    https://modules.perl6.org/
        This is just a directory site, listing the modules and a short 
        description, then linking out to where they're actually hosted.  In 
        all cases that I can see, they're hosted on github.

        To have a module listed here, you're required to use git for version 
        control.  The instructions given on the tut require you to also use 
        github, but I assume you could use bitbucket or whatever if you really 
        wanted to.


    The tut gives explicit instructions on how to set up a module.  No point 
    in repeating it all here, but it all looks perfectly cromulent.

}#}}}
Module-Authoring Tools {#{{{
    http://doc.perl6.org/language/modules-extra

    Info for making modules at that link.  No need to repeat it here.
}#}}}

### Info I've found somewhere other than the tut
Class declaration extra info {#{{{
    http://design.perl6.org/S11.html#Modules

    I just found this declaration in LWP::Simple:
        unit class LWP::Simple:auth<cosimo>:ver<0.090>;



    The synopsis (scroll down to the Versioning section) states that a 
    compilation unit (module, etc) can include the following tags:
            auth    authority or author (ambiguous on purpose)
            ver     version
            api     "api indicator".  Nope, I dunno.

        To be included in an official library, 'auth' and 'ver' are required, 
        and 'api' is optional.


    The synopsis also says that we should be able to specify an author or 
    version or whatever when we import the module:
            use MyAuth:auth<jdbarton>;
            use MyAuth:ver<1.1>;

    However, what I'm finding is that those tags do nothing at all.  All three 
    of these work just fine to import my module:
            use MyAuth;
            use MyAuth:auth<jdbarton>;
            use MyAuth:auth<blargleflurble>;

    But, if I leave out the "auth" in my use statement, nothing works at all:
            use MyAuth:<jdbarton>;              # GONNNG
            use MyAuth:<blargleflurble>;        # GONNNG



    NYI
    I'm not sure what's going on here.  But I'm having the exact same problem 
    when I try to restrict usage of that LWP::Simple module, and presumably 
    the author of that module understands what he's doing.

    So either there's something wrong with my understanding of how to "use" 
    this stuff, or this feature hasn't been implemented yet.

    Actually, the synopsis specifically tells me that I can do this to specify 
    what version of perl I want:
            use Perl:<6.0>;

        I tried that exact line, and also
            use Perl:<6.c>;

        In both cases, I got "Could not find Perl:<6.0>" (or "<6.c>").  I'm 
        strongly leaning towards "rakudo doesn't support this yet".


    ...and I just found a comment by Zoffix on this blog page:
        http://cupubox.net/l.pl/20/http/blogs.perl.org/users/enkidu/2016/02/perl6-module-namespace.html
    stating that
        "I don't think there's yet any decent support for the :auth adverb".
    (02/26/2016).






}#}}}
META6.json {#{{{
    Supposed to accompany your distribution.  I'm unclear where this would go 
    for a top-level module.

    Discussed in Synopsis 22:
        http://cupubox.net/l.pl/20/http/design.perl6.org/S22.html#location

}#}}}
Importing {#{{{

    http://design.perl6.org/S11.html

    Generally you'll do:
            use SomeModule;

        Or, to specifically import certain symbols:
            use SomeModule <&exported_sub @exported_array>;


    "use" breaks down into:
            need SomeModule;
            import SomeModule;
        or...
            import SomeModule <&exported_sub @exported_array>;


    If the module you're importing is a class module that doesn't export 
    anything, you could just need the module instead of use:
            need SomeModule;
            my $sm = SomeModule.new();



}#}}}
use lib {#{{{

    In perl6maven's Bailador sample code, he uses this:
            use lib callframe(0).file.IO.dirname ~ '/lib';

        In a simple test script named "jon.p6", this:
                say callframe();
            produces:
                ./jon.p6 at line 3

        So that more complicated 'use lib' looks like the more familiar 
        p5-ism:
                use lib "$FindBin::Bin/lib";


    But if you want to keep it simple, you can just do
            use lib 'lib';

}#}}}

