

- Need to add logging

- Need to change all module extensions to ".pm6" and delete my vim modelines.
    - Just change the filenames - nothing in the code needs to change.



I'm to the point of wanting to include a separate class for each building in 
the game.  But what's happening is that I can only use X number of classes.

I create all the building classes (2 lines of code each), and then use a 
loader module (Buildings.pm6) to load in all of those classes.  I've had to go 
through that loading module and comment out "use" lines.  I've found that 
there's a point where I can run the test.p6 code fine.  But if I uncomment one 
more "use" line, test.p6 blows up with:
    You cannot create an instance of this type
      in block <unit> at ./test.p6 line 227

Line 227 is
    my $planet = Games::Lacuna::Model::Body.new( :account($a), :body_name('bmots07') );

I've tried:
    - Breaking up Buildings.pm6 into multiple smaller group loader modules 
      (one for SS modules, one for LCOTs, one for callable buldings, etc - 
      this is the state the code is in now), and then having Buildings.pm6 
      itself load those sub loader modules.  Same problem.
    - I got the code to the point of "one more 'use' statement blows shit up".  
      I then uncommented one more 'use' statement, but changed the namespace 
      of the class it was declaring to BuildingsFoo::modulename.pm6.  Same 
      problem.
    - I just updated to the 2016.03 version of Rakudo, but the results are 
      exactly the same.


Usage trace:
    Body.pm uses OwnPlanet.pm
    OwnPlanet.pm uses OwnBodyRole.pm
    OwnBodyRole.pm uses OwnBuilding.pm
    OwnBuilding.pm uses Buildings.pm

    Buildings.pm is then loading all of the individual building classes.  
    Right now I have those broken up into groups (Callable, Boring, Glyph, 
    etc), which are their own loader-type modules, and Buildings.pm is 
    actually loading those.
    

I could try and reduce the number of classes - do something other than 
one-class-per-building, but that'd be a bandaid workaround.  The problem is 
that I don't understand why p6 balks at too many 'use' statements.  I'm hoping 
it's just an implementation bug.

Another option is to get rid of all of the classes listed in Boring.pm6.  
Those are building classes that don't do anything past what a regular Building 
does.  Again, this is a bandaid to fix a problem that shouldn't be happening, 
but I would like to get this working.





Classes to add {#{{{

    - Empire.pm
    - Building.pm
    - Ship.pm
        - These need to be factories like Body.pm is.
        - Body.pm (and possibly other classes) includes its own little 
          mini-ship and empire utility classes.  Those ultimately need to go 
          away, to be replaced by mini-classes in Empire.pm and Ship.pm.  
          These "mini-classes" need to be similar to the ForeignBody class in 
          Body.pm.

}#}}}
HTTP Traffic {#{{{
    Using Net::HTTP, some https requests fail, some succeed.  Not sure what 
    the difference is.  Fetching captcha images fails.
        This is now fixed; see the OpenSSL section below.

    I tried switching to HTTP::UserAgent.  In tests, it's able to access https 
    URLs that Net::HTTP is not.

    However, HTTP::UserAgent isn't POSTing properly.  When I send "params" to 
    a TLE server, it must be sent as an array, and HTTP::UserAgent is sending 
    it as a single scalar value (at least when there's only a single param).  
    TLE won't accept that - it requires a single-element array.
}#}}}
OpenSSL {#{{{
    
    For a full explanation, see ../../modules/Net/HTTP/README.

    The short explanation is that the actual OpenSSL.pm used by Net::HTTP is  
    not able to access TLE https servers.  I had to hack at OpenSSL.pm to get 
    it to work, and that hacked copy is what's in ./lib/ and is what's being 
    used by this TLE client for HTTPS network traffic.

    My hack is naive, and is likely to cause problems with hitting https URLs 
    other than TLE.  Plus, it could well blow up at any time if the TLE 
    servers get re-configured.
    
}#}}}

