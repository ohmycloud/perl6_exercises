

This is not meant to be a real benchmark that you'd publish somewhere.  It 
just shows major differences in runtime of this particular script.


This directory was copied from ../process_files_in_chunks/.  ./bench.p6 used 
to be channel_process.p6, just renamed and modified.

The "work" being done on the data file was a simple "sleep" at one point, but 
that's changed.
    - each line of data is a CSV record, containing the ints 1..100 inclusive.
    - each record gets parsed, and each field gets passed to a fizzbuzz() 
      function that does what you'd expect.


I should have the MoarVM version of p6 set as "perl6".  To test that:
    $ ./bench.p6

To test the JVM backend, run:
    $ perl6-j bench.p6



The numbers below are all with a 10,000 line input file, 16 writers, and a 
chunk_size of 1000.  Run on Gandalf unless otherwise marked.
    make_file.p6 will generate the input file.

System monitor shows all 8 CPUs pegged throughout all runs.

Unless otherwise marked, the results below are for the MoarVM backend.
2016.09 {#{{{

    Gandalf:
        That took 9.01635660 seconds.
        That took 9.3431287 seconds.
        That took 9.7628754 seconds.

    I really did get the 9.0 and 9.3 on the first two runs.  But every run 
    after that has been in the 9.7 range (even after shutting firefox down).

}#}}}
2016.08.1 {#{{{

    Gandalf:
        That took 9.66535620 seconds.
        That took 9.66535620 seconds.
        That took 9.6464326 seconds.

    Samwise:
        That took 10.5585642 seconds.
        That took 10.5845216 seconds.
        That took 10.79959332 seconds.

}#}}}
2016.07.1 {#{{{
    That took 9.429807 seconds.
    That took 9.70532788 seconds.
    That took 9.5742182 seconds.

    This is the first rakudo release I built perl6-j for.  It dies with an 
    error while trying to run bench.p6.
}#}}}
2016.06 {#{{{
    That took 13.4562380 seconds.
    That took 14.11713923 seconds.
    That took 14.18581810 seconds.
}#}}}
2016.05 {#{{{
    That took 16.72274615 seconds.
    That took 16.53702586 seconds.
    That took 17.09463550 seconds.
}#}}}
2016.04 {#{{{
    That took 48.2805361 seconds.
    That took 47.9116557 seconds.
}#}}}
2016.03 {#{{{
    That took 49.94158147 seconds.
    That took 52.22464466 seconds.
}#}}}
2016.02 {#{{{
    That took 166.3465894 seconds.
    That took 160.870737 seconds.
}#}}}
2016.01 {#{{{
    That took 161.6083336 seconds.
    That took 160.6782715 seconds.
}#}}}
2015.12 {#{{{
    That took 160.3743321 seconds.
    That took 162.7341972 seconds.
}#}}}

There have obviously been huge improvements.

