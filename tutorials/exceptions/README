
p6 exceptions are objects inherited from the Exception class.
    http://doc.perl6.org/type/Exception


ad-hoc exceptions {#{{{

    This is an ad-hoc exception:
        die "crapola, something broke.";


    That's almost certainly the way I'll be using it, out of habit, but that 
    _is_ creating an exception object.

    This is identical to the "die" line above:
        X::AdHoc.new(:payload<crapola, something broke>).throw;

}#}}}
Typed exceptions {#{{{

    die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"));

    No, you can't just make up any nonsense (X::Blarg::Broken.new(...) doesn't 
    work).  
    
    Existing exceptions are listed on the "types" page under the "X::" 
    namespace:
        http://doc.perl6.org/type.html

    However, if you want to create your own exception class:
            class X::Blargle::Broke is Exception {
                method message() {
                    "Your shit didn't work.";
                }
            }

            die X::Blargle::Broke.new();

}#}}}
Try blocks {#{{{

    If you've got something fishy going on, you can wrap it in a try block and 
    then inspect $! afterwards:
            try { die "foobar" };
            say "--$!--";               # --foobar--

}#}}}
When does an exception get thrown (Important) {#{{{
    
    This is unexpected:
            my $var = 10 / 0;
            say "foobar";


    Dividing by zero certainly causes an exception.  But what happened is that 
    an invalid value was assigned to $var, but we never actually tried to use 
    $var.  So NO EXCEPTION WAS THROWN!

    It's only the attempted use of the invalid value that throws the 
    exception.

    So the code above happily displays "foobar" with no errors.


    However, this _would_ produce an error:
            my $var = 10 / 0;
            say "foobar";
            say $var;               # actually try to use $var and BOOM

        Output:
            foobar
            Attempt to divide by zero...

        So the exception still is not thrown until we try to access $var.


    This means that you could have broken-ass code outside a try block, and 
    only include the _use_ of the resulting variable inside the try block:
            my $var = 10 / 0;
            try { say $var };
            say "I caught --$!--" if $!;

        Output:
            I caught --Attempt to divide 10 by zero using div--



    This is unfortunate.  I generally don't go around dividing by zero, so 
    usually $var will be a valid value.  I don't want to just go around 
    printing out valid values as the code above would do.

    But I'm not seeing other ways of "using" that $var that will trigger the 
    exception to be thrown.  None of these try blocks trigger the exception:

            my $var = 10 / 0;
            try { $var };
            try { $var++ };
            try { my $foo = $var * 3 };
            say "I caught --$!--" if $!;


    CHECK
    So how do I go about checking whether I just divided by zero or not 
    without printing that value out?  I dunno.

}#}}}
CATCH blocks {#{{{

    CATCH does need to be fully capped.  "catch" does not work.

    While $! is the default exception-containing variable elsewhere, inside a 
    CATCH block, the exception gets assigned to $_




    CATCH is no longer an answer to a try block -- it's not a rewrite of p5's 
    Try::Tiny et al.
    
    Instead, the CATCH block catches an exception that occurred in its 
    containing block
    
    But that exception does still occur for the purposes of that containing 
    block, so this doesn't work as you'd expect:
            die "foobar";
            CATCH {
                default {
                    say "I caught $_"
                }
            }
            say "still here";           # never hits

        ...that whole mess is in the outermost lexical scope.  The "die" runs 
        for the purposes of its lexical scope, so the upshot is that our 
        program dies and we never get to that last 'say'.


    You'd need to wrap that die in its own scope:
            {
                say "This will display since we haven't died yet."
                die "foobar";
                say "This won't display because this block already died.";

                CATCH {
                    ### Catch any exceptions that happened in the same scope
                    ### As the CATCH block itself.
                    default {
                        say "I caught $_"
                    }
                }
            }
            say "Still here outside the block";     # hits.




    Throw and catch a specific exception:
            {
                die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"));
                CATCH {
                    when X::IO {
                        say "We got an IO exception.";
                    }
                }
            }
            say "back to main"

        Output:
            We got an IO exception.
            back to main




    You could add a default block to the above to catch all exceptions:
            {
                die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"));
                CATCH {
                    when X::IO::Copy {
                        say "We got a copy exception.";
                    }
                    default {
                        say "We got some exception we weren't expecting."
                    }
                }
            }

        Since we threw an IO::DoesNotExist but tried to catch an IO::Copy, the 
        default block will hit.



    We can get more info out of our exception:
            die X::IO::DoesNotExist.new(:path("foo/bar"), :trying("zombie copy"));
            CATCH {
                when X::IO {
                    say .WHAT.perl;                 # X::IO::DoesNotExist
                    say .backtrace[0];              # long string of output I'm not going to copy here.
                    say .backtrace[0].file;         # gen/moar/m-CORE.setting
                    say .backtrace[0].line;         # 19466
                    say .backtrace[0].subname;      # throw
                }
            }

        And all of that .backtrace and .WHAT crap can be simplified to:
                when X::IO {
                    say .WHAT.perl, do given .backtrace[0] { .file, .line, .subname }
                }

            Output is:
                X::IO::DoesNotExist(gen/moar/m-CORE.setting 19466 throw)


    Normally, a block like this will die on the first fatal error, and that's 
    all that will be caught:
            {
                die "one";
                die "two";
                die "three";
                CATCH {
                    default {
                        say "--$_--";
                    }
                }
            }
            say "back to main"

        Output:
            --one--
            back to main


    But we can use .resume to have our CATCH block ignore fatals:
            {
                die "one";
                die "two";
                die "three";
                CATCH {
                    default {
                        say "--$_--";
                        .resume;                # there it is
                    }
                }
            }
            say "back to main"

        Output:
            --one--
            --two--
            --three--
            back to main

}#}}}
Resume after catching {#{{{

    REMEMBER that "resume" is not a bare keyword.  It's a method that gets 
    called on the Exception object.

    So ".resume", or "$_.resume;", not just "resume;"


    Anyway...
    
        try {
            die "Foobar!";
            CATCH {
                .Str.say;
                .resume;
            }
        }
        say "This prints because of the .resume method call.";

    The output of that is:
        Foobar!
        This prints because of the .resume method call.



    As before, if you only wanted to catch, say, AdHoc exceptions, just modify 
    the code to:
        try {
            die "Foobar!";
            CATCH {
                when X::AdHoc {
                    .Str.say;
                    .resume;
                }
            }
        }
        say "This prints because of the .resume method call.";

}#}}}
Throwing exceptions {#{{{
    
    You can throw an exception using the "throw" method on an exception 
    object.  These two are identical:
        die "foobar";
        X::AdHoc.new(:payload<foobar>).throw;


}#}}}
Try blocks {#{{{
    
    This is going to burn me.
    Put the CATCH inside the try block, not after it.

    try {
        CATCH {
            .Str.say;
            .resume;
        }
        die "this is the thing that's going to get caught."
    }
    say "this gets output because of the resume.";


    This is a simple example, but the idea is that the try block can contain 
    multiple different exceptions, and you could test for all of them and 
    behave differently depending on which one gets thrown using:
        CATCH {
            when X::Type::A { do A stuff }
            when X::Type::B { do B stuff }
            when X::Type::C { do C stuff }

            ...code that might throw exceptions of type A, B, and/or C...
        }



    It looks to me like the "try" keyword is unnecessary.  As long as you've 
    got a lexical block containing the CATCH and your suspect code, that 
    containing lexical block becomes your try block.

}#}}}


