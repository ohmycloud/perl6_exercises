
http://doc.perl6.org/language/syntax


Separators {# {{{

    Semicolons are expression separators, not line terminators.



    The tut claims that:
            A closing curly brace followed by a newline character implies a 
            statement separator

        Bullshit.  You cannot do this, though the tut implies that you can:
            say %foo{'bar'}
            say "still here";

        That first line is a "closing curly brace followed by a newline 
        character".  But without the semicolon, p6 barfs on that.

        The point that the tut is trying to make here is that this is legal:
                if True {
                    say "It's true"
                }
                say "after the block";

            ...as is this:
                if True { say "It's true" }
                say "after the block";

            ...but this is NOT legal:
                if True { say "It's true" } say "after the block";      # GONNNG

            If you really wanted to write code like that last case, the block 
            WOULD need a semicolon separator:
                if True { say "It's true" }; say "after the block";     # Fine.


}# }}}
Comments {#{{{

    This works like in p5:
            # Single-line comment


    This is new:
            if #`( Inline comment ) True {
                say "This is true"
            }
        You can use any grouping pair for that.

    That inline comment can also be used as a multiline comment.
            #`(
                Here's a multiline
                comment.
            )

    The inline comment _can_ contain its own grouping characters.  The parser 
    looks for the balanced closing character, not just the first one:
            #`(
                Here's a (multiline) comment.  The (parens) inside are OK.
            )

    Also, your grouping characters can be more complex if you want, just to 
    disambiguate (for your own eyes -- as I said, internal grouping chars do 
    not confuse p6, just the p6 programmer) from any internal brackets (eg if 
    you're commenting out a chunk of code):
            #`{{
                if True {
                    say "This is some code that we're commenting out.";
                    say "The double curlies used as the comment grouper";
                    say "are more obvious since they're doubled up."
                }
            }}


    VIM
        I've set up an iabbr ("mlc") for these multiline comments.  It does 
        include newlines and internal indentation because it's meant as a 
        multiline comment block, not as an inline comment.
        I don't foresee using that inline comment all that often, and when I 
        do want it, I figure I can just use the "mlc" iabbrv and then fix it 
        into a single line by hand.


    POD
    You can still use POD as a multiline comment.  But POD syntax has changed 
    now, in that you have to label your blocks.

    This no longer works:
            =pod

            This is no good anymore.

            =cut

    Instead, you need this:
            =begin mycomment

            This works.

            =end mycomment

        "mycomment" is just a label name and can be anything.


    Slightly off-topic:
        A good feature to the new POD is that the POD commands do not have to 
        start at column zero in your file.  You can actually indent them.  The 
        =begin and =end POD commands do have to have exactly the same 
        indentation level as each other (and I'd assume that any other POD 
        commands would also need to share the same indentation), but they can 
        be indented.

    But to me, using POD as a multiline comment has always seemed to be a 
    horrible work-around.  Since you need to type even more to get it, and 
    since we now have a real multiline comment setup, you really shouldn't be 
    using POD for this anymore.  Use POD for plain ol' documentation, not for 
    comments.

}#}}}
Identifiers {#{{{

    Similar to p5, but some extended rules.  These rules apply to variables, 
    constants, routines, and types.

    - Must start with an alphabetic (a-zA-Z) or underscore.
    - After the first alpha char, you can use more letters as well as numbers.
    - You can also use hyphens and single-ticks, just not two in a row.

        FINE:
            my $foobar      = 1;
            my $foobar1     = 1;
            my $foo-bar     = 1;
            my $foo'bar     = 1;
            my $fo'o-bar    = 1;

        GONNNG!:
            my $1foobar     = 1;
            my $foo--bar    = 1;
            my $foo'-bar    = 1;

}#}}}
Statements and Expressions {#{{{

    I think this is the same as p5, I've just never thought about it in 
    exactly this way.

    All expressions are statements.  Expressions return a value, statements 
    may not.

            if True { print 42 }            # Statement, not expression
            my $foo = if True { print 42 }  # syntax error since the statement
                                            # does not return a value.

            1 + 2;                          # Statement and expression
            my $foo = 1 + 2;                # fine since 1 + 2 is an expression.

}#}}}
Terms (nouns) {#{{{
    
    Variable names ($var), type names (Int), literals (42), declarations ( sub 
    foo {} ), and calls ( foo() ) are all Terms.

}#}}}
Operators (verbs) {#{{{
    
    As you'd expect.
            my $rslt = 2 * $var;

    $rslt, 2, and $var are all terms.  = and * are operators (verbs).

}#}}}
Barewords (Constants, type names) {#{{{

    This includes "self" and other sigil-less variables.

    Constant:
            constant ANSWER = 42;

    'get_name', and 'self' below are Barewords.
            class Jon {
                has $.name = 'Jon';
                method get_name {
                    return self.name.uc;
                }
            }

}#}}}
Packages, Qualified names {#{{{

    Again, similar to p5, with some extensions.

            $foo;               # simple identifier
            $Foo::Bar::foo      # compound (qualified) identifier

            my $ns = 'Bar';     # namespace
            $Foo::($ns)::foo    # compound identifier with interpolation (yay!)
    
    
}#}}}
Literals (BIG SECTION LOOK IN HERE) {#{{{

    String literals {#{{{
            say 'A string with no interpolation.';
            say "A string with\n\tinterpolation\nbecause of the double-quotes.";
    }#}}}
    Integer literals {#{{{
        Like p5, use underscores for digit grouping.  The parser ignores them; 
        they are only for the programmer's convenience.  These are all 
        identical:
            $num = 1000000;
            $num = 1_000_000;
            $num = 10_00_00_0;
            $num = 1_0_0_0_0_0_0;   # pathetic and sad, but legal.

        Decimal is the default, but other bases can be used:
            $decimal    = 20;
            $binary     = 0b10100;      # 0b
            $octal      = 0o24;         # 0o
            $hex        = 0x14          # 0x

        Those are the bases for which shortcuts exist.  But if you really 
        wanted to, you can use any base:
            $base_three = :3<202>;
            say $base_three;            # 20

        Leading zeroes that aren't followed by 'b', 'o', or 'x' to indicate a 
        different base result in a warning:
            $decimal    = 0001;         # gonnng!
    }#}}}
    Rat literals {#{{{
            $rat        = 1.0;
            $rat        = :3<21.0012>;
            $rat        = 3.14159;
            $irrat      = Ï€;            # legal, but not rational.
    }#}}}
    Num literals {#{{{
        Scientific notation.
            $num        = 1e0;
            $num        = 6.2e23
    }#}}}
    Complex literals {#{{{
        These include an imaginary number.
            $comp       = 1 + 2i;
            say $comp               # 1+2i
    }#}}}
    Pair literals {#{{{
        Generally used when assigning to a hash.
            %h = (
                foo => 'bar'        # this is the Pair literal
            );

        This is identical to the above.  Not positive why I'd want this, I 
        guess because it looks like JSON.
            %h = (
                foo:('bar')         # this is the Pair literal
            );
    }#}}}
    Arrow pairs {#{{{
        The LHS can be an expression or identifier.
            lhs             => 42
            "lhs"           => 42
            ('lh' ~ 's')    => 42

        So this is ridiculous, but legal:
            my %h = (
                "foo"           => 'bar',
                ('lh' ~ 's')    => 42
            );
            say %h;             # foo => bar, lhs => 42
    }#}}}
    Adverbial pairs {#{{{
            my $ans     = 42;
            :$ans       # ans => 42
            :ans        # ans => True
            :!ans       # ans => False

        So we can do this:
            my $one     = 1;
            my $two     = 2;
            my $three   = 3;

            my %h = ( :$one, :two, :!three );
            say %h;     # one => 1, three => False, two => True
    }#}}}
    Array literals (contains an N.YI) {#{{{
        The square brackets make it an Array, not a List.
            ['a', 'b', 'c'].join(' ').say;          # a b c

        NYI:
            The tut specifically says that this assignment flattens the @a 
            array:
                my @a = 1, 2;
                say [@a, 3, 4].elems;

            The tut says that that 'say' will produce '4', since the @a array 
            got flattened out.  However, when I run that, I am getting '3' 
            output, not '4' - @a is NOT being flattened.

            What's happening makes perfect sense to me; I think that the 
            tutorial is just wrong.

            What I'm finding here
                http://doc.perl6.org/language/containers
            is that you can flatten if you want to (you can leave your friends 
            behind), but you have to do it explicitly:
                my @a = 1, 2;
                say [@a, 3, 4].elems;           # 3
                say [flat @a, 3, 4].elems;      # 4
                     ^^^^
    }#}}}
    Hash literals {#{{{
        A pair of curlies around a list of Pairs forms a hash literal, as 
        expected.
            { foo => 'bar', baz => 'quux' }.say;
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --> hash constructor

        The curly braces are optional when assigning to a variable with a % 
        sigil, since that type-hints to the compiler what's going on:
            my %hash = foo => 'bar', baz => 'quux';     # No curlies, this is fine because of the %
            say %hash.WHAT;                             # (Hash)
            
            my $var = { foo => 'bar', baz => 'quux' };  # With curlies, this is fine too.
            say $var.WHAT;                              # (Hash)

            my $var = foo => 'bar', baz => 'quux';      # Produces a warning.  No %, no curlies.
            say $var.WHAT;                              # (Pair)

        
        Object Keys
            When using bare curly braces, keys are forced to be strings.
                my $h = { now => 'foo' };
                say $h.WHAT;                    # (Hash)
                say $h;                         # now => foo

            To use objects as keys, prefix the curly braces with a colon:
                my $h = :{ now => 'foo' };
                say $h.WHAT;                    # (Hash[Mu,Any])
                say $h;                         # now => foo     (hmm, that still wasn't what I meant...)

            ...and wrap your non-string in parens:
                my $h = :{ (now) => 'foo' };
                say $h.WHAT;                    # (Hash[Mu,Any])
                say $h;                         # Instant:1454628572.925223 => foo

        NOTE - when your hash includes object keys, you can no longer access 
        non-string keys as strings.

            Here's a 'regular' hash:
                my $h = { 0 => 'zero' };        # Regular string-keyed hash
                say $h{'0'};                    # zero
                say $h{0};                      # zero

            And here's an object-keyed hash:
                my $h = :{ 0 => 'zero' };       # Colon, so keys can be objects
                say $h{'0'};                    # (Any)
                say $h<0>;                      # (Any) -- same as {'0'}
                say $h{0};                      # zero
        
    }#}}}
    Regex literals {#{{{
        http://doc.perl6.org/language/syntax#Regex_literals

            
                /foo/;              # short version
                rx/foo/;            # long version

        With the long version, you can use delimiters other than // (eg 
        rx!foo!), but if omitting the 'rx', you do need to use the slashes.

        The tut also shows this version:
                Q :regex /foo/      # silly long version

            It's ridiculous; there's no need to type that nonsense when the 
            other two versions exist.

            PLUS (NYI), it doesn't work.  It produces a compile error.


        Both of these conditionals hit:
                my $re = rx/foo/;
                if 'foobar' ~~ $re      { say 'match' }
                if 'foobar'.match($re)  { say 'match' }

            Hard to remember, but .match() is a method of the string, NOT of 
            the regex.
        
    }#}}}
    Signature literals {#{{{

        The tut I'm reading from:
            http://doc.perl6.org/language/syntax#Signature_literals

        The signature class:
            http://doc.perl6.org/type/Signature


        Signatures are generally used to constrain the arguments passed in to 
        a routine.  But they can also be used in a pattern match.  All of 
        these hit:
                say "match" if 5 ~~ :Int;
                say "match" if 5, "fish" ~~ :(Int, Str);

                my $sig = :(Int $a, Str);
                say "match" if (5, "fish") ~~ $sig;

        There is a reason for declaring $a above.  Though it's not necessary 
        to the above example, here's one where it is necessary:
                given "foo", 42 {
                    when :(Str, Str) {
                        say "This won't match"
                    }
                    when :(Str, Int $n where $n > 20 ) {
                        say "This will match"
                    }
                }

    }#}}}

}#}}}
Declarations {#{{{
    
    Variable declarations {#{{{

                my $x;              # lexical variable, type is Any
                my $x = 7;          # type implicitly Int
                my Int $x = 7;      # type explicitly Int
                my Int:D $x = 7;    # variable must be defined (no undef)

            Constraint based on a function:
                my Int $x where { $_ > 3 } = 7;

            Same constraint as above, but using what the tut calls L<Whatever> 
            shorthand:
                my Int $x where * > 3 = 7;


        Attempting to assign a value to a variable if that variable does not 
        match the declaration results in a runtime error:

                my Int:D $x = 7;
                # Type check failed in assignment to $x; expected Int:D but got Rat
                $x = 4.2;
                # Type check failed in assignment to $x; expected Int:D but got Any
                $x = Any;

                my Int $x where { $_ > 3 } = 7;
                $x = 2;
                # Type check failed in assignment to $x; expected <anon> but got Int

            That last error is confusing.  "But I gave it an Int, wtf?"


        If you're constraining based on a function, you can go ahead and 
        define that function once:
                my $mysub = sub constrain(Int $const) {
                    return $const > 3 ??  True !!  False;
                }

            Then use it in either of these two ways:
                my Int $x where $mysub($_)      = 7;
                my Int $x where constrain($_)   = 7;


        Also see
            http://docs.perl6.org/language/variables#Variable_Declarators_and_Scope

    }#}}}
    Subroutine declarations {#{{{
        
        The signature on a sub declaration is optional:
                sub sayit { say "foo"; }

        However, I don't believe there's any way to pass in an argument 
        without a sig.  None of these work:
                sub say_arg { say $_    }
                sub say_arg { $_.say    }
                sub say_arg { .say      }


        Subs can be assigned to variables.
        
        The & sigil, like @ and %, indicate that the variable is meant to hold 
        a routine.  But it still doesn't know exactly what type of routine, so 
        it starts out as Callable:
                my &code;
                say &code.WHAT;     # (Callable)

                &code = sub{ say "this is code" }
                say &code.WHAT;     # (Sub)


        You can also assign code to a scalar.  That scalar just won't have a 
        type any more specific than Any until the assignment:
                my $code;
                say $code.WHAT;     # (Any)

                $code = sub{ say "this is code" }
                say $code.WHAT;     # (Sub)


        You can also use lambda-style syntax using either sigil.  I'm not sure 
        that this gets you anything extra; I assume it's just to make the 
        Haskell programmers more comfortable:
                my $code = -> { say "this is code" }
                my &code = -> { say "this is code" }
        

    }#}}}
    Module, Class, Role, Grammar declaration {#{{{
        
        I'm not sure why the tut bothered to include this, but the extent of 
        it is:
                module MyMod        { ... }
                class MyClass       { ... }
                role MyRole         { ... }
                grammar MyGrammar   { ... }


        Each of those can be declared as a "unit".  It looks like that's 
        similar to a p5 package declaration, where the following code is not 
        wrapped in curlies:
                unit module MyMod;
                ### code here is part of the MyMod module.

            But since I started using brace-delimited classes as soon as 5.14 
            made them available, I don't foresee ever wanting that unit.

    }#}}}
    Multi Dispatch declaration {#{{{

                multi sub greet             { say "Hello" }
                multi sub greet(Str $name)  { say "Hello, $name" }

        You can do the same thing with methods.
        
    }#}}}

}#}}}
Subroutine & Method calls {#{{{
            my &f = sub foo { say 'this is foo' }

            foo;
            foo();
            &f();

    This is the same as &foo():
            &f.();

    We need that version with the . in it if we have an array of functions 
    that we want to call:
            my @functions = (&f, &f, &f);
            @functions>>.();                # calls foo() 3 times



    Method calls are listed as:
            $person.set-name-age('jane', 98);  # Most common way
            set-name($person: 'jane', 98);     # Invocant marker

            $person.set-name: 'jane', 98;      # Precedence drop

        The first two calls make sense, though the second call doesn't look 
        all that useful.
        
        The third, labeled "Precedence drop" is not explained in the tut other 
        than that comment.  I don't know what precedence gets dropped.

}#}}}
Operators {#{{{
    
    There's nothing earthshattering here, except maybe an explanation of 
    terminology:

        <foo bar baz>;      # circumfix.  operator surrounds single input.
        %foo<bar>;          # postcircumfix.
    
}#}}}
Meta Operators (In-Place value modifications, Reductions, Hyper Operators) {#{{{

            my $var = 3;


    As with p5, you can combine ("compose") any binary (infix) operator with 
    assignment:
            $var += 2;
            $var *= 9;
            $var /= 4;
        etc


    IN-PLACE VALUE MODIFICATION
        You can also use that composition in a different way now:
            my $str = 'foobar';

        Str's uc() method RETURNS its value:
            my $uppercase = $str.uc;
            say $uppercase;                 # FOOBAR

        But if you wanted to uppercase your string in-place:
            $str .= uc;                     # same as $str = $str.uc
            say $str;                       # FOOBAR


    REDUCTIONS
        Wrapping your operator in square brackets creates a reduction, which 
        works on a list of inputs to produce a single value:
            my $var = [+] <1 2 3 4 5>;
            say $var;                       # 15

        Precedence on that is L2R, so it's equivalent to (very explicitly):
            my $var = (((1 + 2) + 3) + 4) + 5;



    HYPER OPERATORS
        If you're looking for "hyper method calls", see the section below on 
        "Info from places other than the tut"; the Zoffix blog article.

        When dealing with these Â« and Â» characters, while they are 
        cool-looking, they can be a pain in the ass to get into your code.  I 
        have some vim abbrevs for them (see below), but they're still a pain.

        P6 does allow us to use the "Texas" variants of simply << and >>.  So 
        these next two lines are identical:
            my $var = <1 2 3> Â«+Â» <4 5 6>;
            my $var = <1 2 3> <<+>> <4 5 6>;


        Wrapping your operator in Â« Â» makes it a "hyper operator", which works 
        on two lists:
            my $var = <1 2 3> Â«+Â» <4 5 6>;
            $var.say;                           # (5 7 9)
            $var.WHAT.say;                      # (List)


        Great.  What if the two lists are of different sizes?  

        The direction of the angle brackets determines what happens in that 
        case.

        Mnemonic: the greater-than side of the angles indicates which list is 
        more important.

        Left Left
            Result is size of @b.  If @a is smaller, its elements will be 
            reused.
                @a Â«+Â« @b
                    $var = <1 2 3 1 2 3> Â«+Â« <4 5 6>;
                    $var.say;                               # (5 7 9)

        Right Right
            Result is size of @a.  If @b is smaller, its elements will be 
            reused.
                @a Â»+Â» @b
                    $var = <1 2 3 1 2 3> Â»+Â» <4 5 6>;
                    $var.say;                               # (5 7 9 5 7 9)

        Left Right (spaceship)
            Result is the size of whichever input is bigger.  The smaller 
            input's elements get reused.
                @a Â«+Â» @b
                    $var = <1 2 3 1 2 3> Â«+Â» <4 5 6>;
                    $var.say;                               # (5 7 9 5 7 9)

        Right Left (cartman)
            If the two inputs are of different sizes, throw an exception.
                @a Â»+Â« @b
                    $var = <1 2 3 1 2 3> Â»+Â« <4 5 6>;

            Exception thrown:
                Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length
                left: 6 elements, right: 3 elements


        You could also wrap a unary operator with the hyper operator:
                say -Â« <1 2 3>;     # (-1 -2 -3)
            
            Again, you can't have any space in your hyper operator:
                say - Â« <1 2 3>;     # (-1 -2 -3)
                     ^
                     |
                     +-- causes compile error

            But again, wtf would you ever need to do this?


    ACTUAL USE CASE
        http://blogs.perl.org/users/zoffix_znet/2016/01/perl-6-rotor-the-king-of-list-manipulation.html

        The tut does a bad job of demonstrating why you'd want something like 
        this.  But I just found a blog post by Zoffix with this example:

                my $str = 'abcdefghijklmnopqrstuvwxyz';
                $str.comb.rotor(10, :partial)Â».joinÂ».say;

        .comb breaks up the string into a list of 26 individual letters.
        .rotor(10, :partial) combines that list into sublists of 10 letters
            each, preserving the last 6 letters.
            So the .rotor() call produces ((a..j) (k..t) (u..z))

            There's a .rotor() example script in ROOT/misc_notes/ with more 
            info.

        The, we use two hyper method calls, first on .join, then on .say, 
        which produces this output:
                abcdefghij
                klmnopqrst
                uvwxyz
        


    ***
    You cannot have any spaces between the operator and the weird angle-y 
    things.  This does not work:
        Â« + Â» 

    I've modified my vim iabbr a bit to try to fight that.  If you're 
    using the spaceship version ( Â«+Â» ), then the iabbrs are perfect.  If 
    you're using any other arrow directionality, you're going to be 
    frustrated.

    I'm thinking about updating the iabbrs to something like
            lla
            rra
            lra
            rla
        "left left arrow", "right right arrow", etc.  But I haven't done 
        that yet.

            <<<
            space
            +
            space
            >>>
            space

        That will leave you with this:
            Â«+Â»|

        Where the pipe is the location of your cursor.
    ***





}#}}}


###
### Info from places other than the tut 
###


http://blogs.perl.org/users/zoffix_znet/2016/02/perl-6-shortcuts-part-1.html

Remove parenthesis on method calls {#{{{
    
    If a method call is the last one in a call chain, you can replace its 
    parens with a colon:
            class Foo {
                method greet(Str $name) { "Hi, $name"; }
            }
            my $f = Foo.new();

        Instead of:
            say $f.greet('Jon');

        ...we could do:
            say $f.greet: 'Jon';


    So something like this:
            $f.log('INFO').name('Jon').greet('Jon');

        ...could be written like this:
            $f.log('INFO').name('Jon').greet: 'Jon';

        log() and name() cannot use that colon since they're not the last in 
        the chain, but greet() can.


    This becomes more useful if your arguments are, themselves, method calls.  
    Here, you want to log the user's name, when he's chosen to use his casual 
    nickname:
            $f.log( $f.use_name( $f.nick_name( 'casual' ) ) );

        OK, that's a lot of parens.  But those method calls are nested, 
        they're not chained.  So, we could do this:
            $f.log: $f.use_name: $f.nick_name: 'casual';

        This may or may not be easier to read, depending on what your eyes are 
        used to seeing, I guess.



    You can also omit parens on a sub call, but you don't need the colon:
            sub greet(Str $name) { "Hi, $name"; }
            say greet 'Sub';


    I'm assuming that the colon is behaving like p5's -> in that it's sending 
    the invocant's class as the first arg.


}#}}}
Comma-less named arguments {#{{{

    Here's a sub taking named args, and a couple "normal" ways of calling it:
            sub faves(:$color, :$number, :$letter) {
                "Your favorite color, number, and letter are: $color, $number, $letter.";
            }
            say faves( :color('red'), :number('7'), :letter('j') );

            my $color = 'green';
            my $number = '90';
            my $letter = 'a';
            say faves(:$color, :$number, :$letter);


    So in this case, you can just omit the commas.  The colons do the 
    separating for you:
            say faves( :color('red') :number('7') :letter('j') );
            say faves( :$color :$number :$letter );


    You can also omit the parens:
            say faves :color('red') :number('7') :letter('j');
            say faves :$color :$number :$letter;


    And you could put the args on newlines if it's easier to read:
            say faves
                :color('red')
                :number('7')
                :letter('j');

            say faves
                :$color
                :$number
                :$letter;

}#}}}
Integers and Booleans in named arguments and pairs {#{{{
    

    To pass an integer as a named arg, you can just prefix the named arg with 
    the integer itself:
            say DateTime.new: :2016year :2month :1day :16hour :32minute;
            

    You can do the same thing with Pairs, if the value is an integer:
            my %ingredients = :4eggs, :2butter-sticks, :4sugar-cups;



    Booleans work more or less the same way.  Just mentioning the arg's name 
    is True, and including a bang after the colon is False:
            sub foo(Bool :$one, Bool :$two) { "One is $one, two is $two"; }
            say foo :one :!two;     # One is True, two is False


    And for Pairs:
            my %salad_requires = :prep, :!cooking, :mixing, :eating;
            say %salad_requires;
            # cooking => False, eating => True, mixing => True, prep => True


}#}}}
Subs as method calls {#{{{
    
    You can create a sub that works as an object method.

    Your sub needs to accept the invocant as its first argument (again, p5-y), 
    and your call needs to prefix this new pseudo-method with an apersand:

            sub greet($self, Str $name) {
                "$self -- $name";
            }
            'foo'.&greet('Jon').say;        # foo -- Jon



    This trick can also be applied to imported classes:
            my $dt = DateTime.now();
            $dt.&greet('Jon').say;          # 2016-02-09T14:56:57.623625-05:00 -- Jon

        Sure, it's a stupid example, but it works.

}#}}}
Hyper method calls {#{{{
    
    These are similar to the hyper operators talked about above.  They'll call 
    the indicated method on a list of elements.

            my $dt1 = DateTime.now();
            my $dt2 = DateTime.now();
            my $dt3 = DateTime.now();

        Both of these are the same:
            ($dt1, $dt2, $dt3)Â».offset-in-hours.say;   # (-5 -5 -5)
            ($dt1, $dt2, $dt3)>>.offset-in-hours.say;   # (-5 -5 -5)


}#}}}

