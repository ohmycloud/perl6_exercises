
http://doc.perl6.org/language/grammars

"Grammars are a powerful tool used to destructure text and often to return 
data structures that have been created by interpreting that text."

..."Grammars allow you to group regexes, just as classes allow you to group 
methods of regular code."

p6 has its own grammar (fine), but it's also using a grammar for the 
JSON::Tiny module (that's the example given by the tut).  The point is that, 
if you need to parse out text, grammars is the way to go.

Grammars are made up of named regexes.


CHECK
Re-read this and understand it better.


Named Regexes {#{{{
    
    These are declared somewhat similar to subs.


    This 'number' regex matches ints or floats:
            my regex number {
                \d+ [ \. \d+ ]?
            }
            say "123" ~~ &number;           # ｢123｣
            say "3.14159" ~~ &number;       # ｢3.14159｣
            say "foo 123 bar" ~~ &number;   # ｢123｣


    You can also use a named regex as part of a larger regex.
            my $str = "123 foo 456";
            say $str ~~ /<number> \s* \w+ \s* <number>/;

        Output of that is:
            ｢123 foo 456｣
            number => ｢123｣
            number => ｢456｣






            
}#}}}
Regex Delcarator {#{{{
    
    This creates regexes that behave as you're used to
    
        my regex this-matches {
            .+ q
        }
        my $str = "this is a longish string that contains the letter q inside it.";
        say so $str ~~ &this-matches;     # True

    What's happening is the ".+" consumes the WHOLE string, and does not 
    find a "q" following it.  Then, the regex starts to backtrack until it 
    does find the "q".  This works, and the regex ends up matching.  But 
    all that backtracking is slow.



    The tut says that you won't actually use "regex" as your declarator 
    that often, because of the slow backtracking.  Instead, you'll use 
    either "token" or "rule".

    BE CAREFUL OF VERBIAGE.  "regex" is a declarator, different from "token" 
    and "rule".  But "regex" is also widely used as the term in Perl whenever 
    anybody's talking about this sort of pattern matching.  So I'd bet JK's 
    life on the idea that, at some point, we're going to run into somebody 
    saying "regex" when they really mean "token" or "rule".

}#}}}
Token and Rule Declarators (and ranting about <.ws> ) {#{{{


    It's a little difficult right now for me to figure out when to use a Token 
    and when to use a Rule.  In one of his blog posts, dr_forr gives this, 
    which I like:
        Generally, if you can put whitespace around something without changing 
        its semantics, you've found a token like <Number> or <String>. Figure 
        out where those breaks are, and you're already halfway to decoding the 
        language in question.

    This set of blog posts involves parsing some JavaScript, which is why he 
    says "decoding the language in question", but the point about tokens vs 
    rules applies to any grammar, not just to language parsers.
        http://theperlfisher.blogspot.nl/2016/02/from-regular-expressions-to-grammars-pt_20.html




    This is the same code as above, except we're using "token" instead of 
    "regex":

        my token this-does-not-match {
            .+ q
        }
        my $str = "this is a longish string that contains the letter q inside it.";
        say so $str ~~ &this-does-not-match;     # False
    
    tokens do NOT backtrack, where regexes do.  So above, once the ".+" 
    matches the whole string and fails to find a "q" following, it stops 
    there and fails.


    The "rule" declarator is very similar to the "token" declarator.  The 
    difference is how they handle spaces (the "rule" declarator causes 
    :sigspace to go into effect.)


    To see the difference, here is another token declarator dealing with 
    spaces (:sigspace NOT in effect):

        my token non-space-y        { .nce 'upon' 'a' 'time' }
        say so 'onceuponatime'      ~~ &non-space-y;              # True
        say so 'once upon a time'   ~~ &non-space-y;              # False

    So that's saying "match this pattern against our string, ignoring 
    unquoted whitespace".  


    FWIW, I'm quoting the strings in all of the examples in this section.  
    That's not necessary; it's being done to be more explicit about the 
    usage of the spaces.  These two are identical:
        my token non-space-y        { .nce 'upon' 'a' 'time' }
        my token non-space-y        { .nce upon a time }


    The string that contains no spaces does exactly match the pattern.

    The string that _does_ contain spaces does _not_ match our token, 
    because our pattern does not explicitly include spaces.

    If I wanted to use a "token" to match a string containing whitespace, 
    I'd need my token to be explicit about that whitespace:
        my token space-y            { .nce ' ' 'upon' ' ' 'a' ' ' 'time' }
        say so 'onceuponatime'      ~~ &space-y;              # False
        say so 'once upon a time'   ~~ &space-y;              # True

    Or, a bit more sanely:
        my token space-y            { .nce' upon a time' }
        say so 'onceuponatime'      ~~ &space-y;              # False
        say so 'once upon a time'   ~~ &space-y;              # True





    Here's the same thing with a rule declarator (:sigspace IS in effect):
        my rule space-y                 { .nce 'upon' 'a' 'time' }
        say so 'onceuponatime'          ~~ &space-y;                # False
        say so 'once upon      a time'  ~~ &space-y;                # True

    That rule example above is confusing.  Here are some better examples:
            say so 'a3'             ~~ rule { a 3 };            # False
            say so 'a 3'            ~~ rule { a 3 };            # True
            say so 'a         3'    ~~ rule { a 3 };            # True
            say so 'a 3'            ~~ rule { a     3 };        # True

            say so 'a 3'            ~~ rule { a3 };             # False
            say so 'a3'             ~~ rule { a3 };             # True



    So the rules:
        - Neither rules nor tokens backtrack.

        - token
            - behaves as if //x is in effect.
            - bare whitespace in the pattern is ignored.

        - rule
            - behaves as if //x is NOT in effect.
            - A bare (unquoted) whitespace character in the pattern is 
                treated the same as <.ws>
                - See the further explanation of :sigspace below.



More explanation of :sigspace
    http://doc.perl6.org/language/regexes#Sigspace'

    The <.ws> that gets turned on when :sigspace is enabled (eg in rules)  
    is weird and magical and hard to pin down.  

    The tut says this:
        "Where whitespace in a regex turns into <.ws> depends on what 
        comes before the whitespace."

    In all of my rule examples above, my rules have both leading and 
    trailing whitespace, but my strings do not, and the rules still match 
    in some cases, so that leading and trailing whitespace in the rule 
    declarations are clearly not significant, so we can see that:
        <.ws> is NOT the same as a flat-out \w+.

    OK, we know what <.ws> is not.  What _is_ it?  Who the fuck knows?  
    The tutorial gives us some examples and some handwaving, but no clear 
    and hard definition, so I'm left to guess.

    I have found these two cases:
            say so 'foo a3'  ~~ rule { foo a 3 };       # False
            say so 'foo a=3' ~~ rule { foo a '=' 3 };   # True

        So in the first line, the whitespace in the rule between the 'a' 
        and the '3' is significant.
        However, in the second line, the whitespace both after the 'a' and 
        after the '=' is being treated as not significant.

    Synopsis 05 tells me that, the second rule above translates to:
            m/foo <.ws> a <.ws> = <.ws> 3/;

    ...which it then tells me is further translated to this:
            m/foo \s+ a \s* = \s* 3/
                    ^     ^     ^
        https://design.perl6.org/S05.html


    The fact that <.ws> changes what it means in different circumstances 
    scares the shit out of me.  The tut assures me that it usually does 
    the right thing, and I believe it.
    
    But since we're allowed to override what <.ws> means, the p6 
    developers knew damn well that <.ws> will not _always_ DTRT.  It seems 
    to me like this is sure to lead to a bug that's going to be hard to 
    track down.



    Here's an example of that <.ws> rule catching me napping:
            my $str = "foobar baz";
            my $rule_1 = rule { foobar };
            say so $str ~~ $rule_1;             # True

        OK, fine, that's what you'd expect.  But what if our rule is just to 
        match "foo"?
            my $str = "foobar baz";
            my $rule_2 = rule { foo };
            say so $str ~~ $rule_2;             # False (wtf?)

        We're being caught by the spaces between "foo" and the braces, that 
        just look like a readable programming style.  But those spaces are 
        being treated as <.ws> and, in this case, there's no space after the 
        "foo" in our string.  We could fix this by removing the spaces in our 
        rule:
            my $str = "foobar baz";
            my $rule_3 = rule {foo};
            say so $str ~~ $rule_3;             # True

        ...or we could have just used a token instead of a rule.


        
}#}}}
Substitutions {#{{{

    This is not covered on this tutorial page, but I keep grepping these files 
    for "regex" and ending up back here, so I figured I'd add this info here.

    p6 regex rules:
    http://search.cpan.org/~dconway/Perl6-Rules-0.03/Rules.pm


    Substitute all commas for nothing (remove all commas) from $str:
            $str ~~ s:global{','} = q{};
        
        You don't have to type out "global":
            $str ~~ s:g{','} = q{};

        Note that when we're specifying a literal string in our pattern, it 
        needs to be quoted.


    Substitute out all commas, colons, and apostrophes with a character class:
            $str ~~ s:g{<[',:]>} = q{};

        Note the <> wrapped around the character class, and also note that now 
        nothing needs to be quoted.



    You can also use the method form, which looks a bit more p6-y.  Again, sub 
    out apostrophes, colons, commas:
            my $new = $str.subst(/<[',:]>/, q{}, :g);

        The args to subst() are (PATTERN, REPLACEMENT, FLAGS).

        You can see that the subst() method returns its result to a new 
        variable.  If you want to just change $str in-place, use the 
        assignment version of the method call:
            $str.=subst(/<[',:]>/, q{}, :g);
                ^^

}#}}}
Action Objects {#{{{

    http://doc.perl6.org/language/grammars#Action_Objects


    The more I read through this section, the more I don't understand wtf is 
    happening.  I need to find another tutorial on this.

    I'm creating ROOT/Grammars/ to include more info on these things, not just 
    from this tutorial.



    
    A grammar is used only to parse text, and is declared with the "grammar" 
    keyword instead of "class".

            grammar TestGrammar {
                token TOP {
                    ^ \d+ $
                }
            }

            my $match = TestGrammar.parse('40');
            say $match;                                 # ｢40｣
            say so $match;                              # True

            my $no_match = TestGrammar.parse('foo');
            say $no_match;                              # (Any)
            say so $no_match;                           # False




    To transform our parsed text, we'd need an Action object, which is a 
    class, in conjunction with our grammar.

    This example uses the same grammar as above.
            grammar TestGrammar {
                token TOP {
                    ^ \d+ $
                }
            }

            class TestActions {
                method TOP($match) {
                    $match.make(2 + $match);
                }
            }

        parse() accepts an argument named "actions":
            my $actions = TestActions.new;
            my $match   = TestGrammar.parse('40', :$actions);

            ...or be explicit about the name we're passing in:
                my $foo     = TestActions.new;
                my $match   = TestGrammar.parse('40', actions => $foo);

            ...or even:
                my $match   = TestGrammar.parse('40', actions => TestActions.new);

        ...either way:
            say $match;             # ｢40｣
            say so $match;          # True
            say $match.made;        # 42



    So when we have an Action object passed in to our call to parse():
        - When the TOP token in the Grammar matches, it automatically calls 
          the TOP method from the Action object, passing the match in as the 
          method argument.
            - In this case, that TOP method adds 2 to the passed-in argument.


    I don't really understand the calls to .make and .made.  They're poorly 
    explained, both on this tut page and on the Match class page.


    In the example given in the tut, the TOP() method in TestActions does not 
    use $match as I've used.  Instead, it uses "$/", which indicates that the 
    argument is a match argument.  So sayeth the tut, but I don't yet 
    understand $/, so I changed it to "$match" to make it easier to 
    understand.  See the tut link to re-read on what that $/ is doing and what 
    it gets you.
        http://doc.perl6.org/language/grammars#Action_Objects


}#}}}
Final example on this tut (READ please) {#{{{

    CHECK

    http://doc.perl6.org/language/grammars#Action_Objects


    The second block of code given (under "A slightly more involved example 
    follows:") -- this block of code does work, and does produce what the tut 
    says it will.

    
    But it's heavily relying on calls to .make and .made, and I don't really 
    grok what those are doing yet.

    
    The other part of that example that I don't get is this:
        - The TOP token is matching
                [<pair> \n+]*
          
          There's a "pair" rule later in the code, and I can see what that's 
          doing - that's not the problem.  That TOP token specifies that the 
          pair be followed by one or more newline characters (\n+).

        - However, there's also this token:
                token ws { \h* }
          
          which is matching zero or more horizontal whitespaces.  Removing 
          this token breaks the code, so it is needed.

          But the TOP token is already matching the newline after the pair.  
          Why do we need this separate token to match horizontal whitespace?


        - And that "ws" token isn't being called or mentioned anywhere else.  
          How is it doing anything?  Is our string run through the listed 
          tokens in lexical order?  I dunno what's going on.

    
}#}}}


